
namespace Majiro.Script {
	/// <summary>Enumeration of WORD values identifing all <see cref="Opcode"/>s.</summary>
	public enum OpcodeValues : ushort {
		// binary operators
		Mul_I         = 0x100,
		Mul_R         = 0x101,
		Div_I         = 0x108,
		Div_R         = 0x109,
		Rem           = 0x110,
		Add_I         = 0x118,
		Add_R         = 0x119,
		Add_S         = 0x11a,
		Sub_I         = 0x120,
		Sub_R         = 0x121,
		Sub_S         = 0x122,
		Shr           = 0x128,
		Shl           = 0x130,
		Cle_I         = 0x138,
		Cle_R         = 0x139,
		Cle_S         = 0x13a,
		Clt_I         = 0x140,
		Clt_R         = 0x141,
		Clt_S         = 0x142,
		Cge_I         = 0x148,
		Cge_R         = 0x149,
		Cge_S         = 0x14a,
		Cgt_I         = 0x150,
		Cgt_R         = 0x151,
		Cgt_S         = 0x152,
		Ceq_I         = 0x158,
		Ceq_R         = 0x159,
		Ceq_S         = 0x15a,
		Ceq_Iarr      = 0x15b,
		Ceq_Rarr      = 0x15c,
		Ceq_Sarr      = 0x15d,
		Cne_I         = 0x160,
		Cne_R         = 0x161,
		Cne_S         = 0x162,
		Cne_Iarr      = 0x163,
		Cne_Rarr      = 0x164,
		Cne_Sarr      = 0x165,
		Xor           = 0x168,
		Andl          = 0x170,

		// unary operators / nops
		Orl           = 0x178,
		And           = 0x180,
		Or            = 0x188,
		Notl          = 0x190,
		Nop_191       = 0x191, // Notl_R
		Not           = 0x198,
		Neg_I         = 0x1a0,
		Neg_R         = 0x1a1,
		Nop_1a8       = 0x1a8,
		Nop_1a9       = 0x1a9,

		// assignment operators
		St_I          = 0x1b0,
		St_R          = 0x1b1,
		St_S          = 0x1b2,
		St_Iarr       = 0x1b3,
		St_Rarr       = 0x1b4,
		St_Sarr       = 0x1b5,
		St_Mul_I      = 0x1b8,
		St_Mul_R      = 0x1b9,
		St_Div_I      = 0x1c0,
		St_Div_R      = 0x1c1,
		St_Rem        = 0x1c8,
		St_Add_I      = 0x1d0,
		St_Add_R      = 0x1d1,
		St_Add_S      = 0x1d2,
		St_Sub_I      = 0x1d8,
		St_Sub_R      = 0x1d9,
		St_Shl        = 0x1e0,
		St_Shr        = 0x1e8,
		St_And        = 0x1f0,
		St_Xor        = 0x1f8,
		St_Or         = 0x200,
		Stp_I         = 0x210,
		Stp_R         = 0x211,
		Stp_S         = 0x212,
		Stp_Iarr      = 0x213,
		Stp_Rarr      = 0x214,
		Stp_Sarr      = 0x215,
		Stp_Mul_I     = 0x218,
		Stp_Mul_R     = 0x219,
		Stp_Div_I     = 0x220,
		Stp_Div_R     = 0x221,
		Stp_Rem       = 0x228,
		Stp_Add_I     = 0x230,
		Stp_Add_R     = 0x231,
		Stp_Add_S     = 0x232,
		Stp_Sub_I     = 0x238,
		Stp_Sub_R     = 0x239,
		Stp_Shl       = 0x240,
		Stp_Shr       = 0x248,
		Stp_And       = 0x250,
		Stp_Xor       = 0x258,
		Stp_Or        = 0x260,

		// array assignment operators
		Stelem_I      = 0x270,
		Stelem_R      = 0x271,
		Stelem_S      = 0x272,
		Stelem_Mul_I  = 0x278,
		Stelem_Mul_R  = 0x279,
		Stelem_Div_I  = 0x280,
		Stelem_Div_R  = 0x281,
		Stelem_Rem    = 0x288,
		Stelem_Add_I  = 0x290,
		Stelem_Add_R  = 0x291,
		Stelem_Add_S  = 0x292,
		Stelem_Sub_I  = 0x298,
		Stelem_Sub_R  = 0x299,
		Stelem_Shl    = 0x2a0,
		Stelem_Shr    = 0x2a8,
		Stelem_And    = 0x2b0,
		Stelem_Xor    = 0x2b8,
		Stelem_Or     = 0x2c0,
		Stelemp_I     = 0x2d0,
		Stelemp_R     = 0x2d1,
		Stelemp_S     = 0x2d2,
		Stelemp_Mul_I = 0x2d8,
		Stelemp_Mul_R = 0x2d9,
		Stelemp_Div_I = 0x2e0,
		Stelemp_Div_R = 0x2e1,
		Stelemp_Rem   = 0x2e8,
		Stelemp_Add_I = 0x2f0,
		Stelemp_Add_R = 0x2f1,
		Stelemp_Add_S = 0x2f2,
		Stelemp_Sub_I = 0x2f8,
		Stelemp_Sub_R = 0x2f9,
		Stelemp_Shl   = 0x300,
		Stelemp_Shr   = 0x308,
		Stelemp_And   = 0x310,
		Stelemp_Xor   = 0x318,
		Stelemp_Or    = 0x320,

		// 0800 range opcodes
		Ldc_I         = 0x800,
		Ldstr         = 0x801,
		Ld            = 0x802,
		Ldc_R         = 0x803,
		Call          = 0x80f,
		Callp         = 0x810,
		Alloca        = 0x829,
		Ret           = 0x82b,
		Br            = 0x82c,
		Brtrue        = 0x82d,
		Brfalse       = 0x82e,
		Pop           = 0x82f,
		Br_V          = 0x830,
		Bne_V         = 0x831,
		Bgt_V         = 0x832,
		Bge_V         = 0x833,
		Syscall       = 0x834,
		Syscallp      = 0x835,
		Argcheck      = 0x836,
		Ldelem        = 0x837,
		Ble_V         = 0x838,
		Blt_V         = 0x839,
		Line          = 0x83a,
		Bsel_1        = 0x83b,
		Bsel_3        = 0x83c,
		Bsel_2        = 0x83d,
		Conv_I        = 0x83e,
		Conv_R        = 0x83f,
		Text          = 0x840,
		Proc          = 0x841,
		Ctrl          = 0x842,
		Bsel_X        = 0x843,
		Bsel_Clr      = 0x844,
		Bsel_4        = 0x845,
		Bsel_Jmp_4    = 0x846,
		Bsel_5        = 0x847,
		Switch        = 0x850,

		// reserved values
		/// <summary>Reserved opcode value, for internal use only by.</summary>
		Reserved      = 0xffff,
	}

	/// <summary>Extension methods for the <see cref="OpcodeValues"/> enum.</summary>
	public static class OpcodeValuesExtensions {
		/// <summary>Gets the standard <see cref="Opcode.Mnemonic"/> from the enum name.</summary>
		public static string Mnemonic(this OpcodeValues code) {
			return code.ToString().ToLower().Replace("_", ".");
		}
		/// <summary>Gets the <see cref="Opcode"/> identified by this WORD value.</summary>
		public static Opcode Opcode(this OpcodeValues code) {
			return Majiro.Script.Opcode.ByValue[(ushort)code];
		}
	}
}
